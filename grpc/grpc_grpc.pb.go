// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: grpc/grpc.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserVelidate_UserToken_FullMethodName = "/UserVelidate/UserToken"
)

// UserVelidateClient is the client API for UserVelidate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserVelidateClient interface {
	// User validate or not
	UserToken(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*UserTokenResponse, error)
}

type userVelidateClient struct {
	cc grpc.ClientConnInterface
}

func NewUserVelidateClient(cc grpc.ClientConnInterface) UserVelidateClient {
	return &userVelidateClient{cc}
}

func (c *userVelidateClient) UserToken(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*UserTokenResponse, error) {
	out := new(UserTokenResponse)
	err := c.cc.Invoke(ctx, UserVelidate_UserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserVelidateServer is the server API for UserVelidate service.
// All implementations must embed UnimplementedUserVelidateServer
// for forward compatibility
type UserVelidateServer interface {
	// User validate or not
	UserToken(context.Context, *UserTokenRequest) (*UserTokenResponse, error)
	mustEmbedUnimplementedUserVelidateServer()
}

// UnimplementedUserVelidateServer must be embedded to have forward compatible implementations.
type UnimplementedUserVelidateServer struct {
}

func (UnimplementedUserVelidateServer) UserToken(context.Context, *UserTokenRequest) (*UserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserToken not implemented")
}
func (UnimplementedUserVelidateServer) mustEmbedUnimplementedUserVelidateServer() {}

// UnsafeUserVelidateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserVelidateServer will
// result in compilation errors.
type UnsafeUserVelidateServer interface {
	mustEmbedUnimplementedUserVelidateServer()
}

func RegisterUserVelidateServer(s grpc.ServiceRegistrar, srv UserVelidateServer) {
	s.RegisterService(&UserVelidate_ServiceDesc, srv)
}

func _UserVelidate_UserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserVelidateServer).UserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserVelidate_UserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserVelidateServer).UserToken(ctx, req.(*UserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserVelidate_ServiceDesc is the grpc.ServiceDesc for UserVelidate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserVelidate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserVelidate",
	HandlerType: (*UserVelidateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserToken",
			Handler:    _UserVelidate_UserToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/grpc.proto",
}
